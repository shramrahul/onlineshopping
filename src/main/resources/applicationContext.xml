<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans.xsd
 	  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <context:property-placeholder location="classpath:application.properties"/>

    <context:component-scan base-package="com.shram.onlineshopping.service.serviceimpl"/>
    <context:component-scan base-package="com.shram.onlineshopping"/>

    <!-- Scan for  transaction-based resources -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!-- The jpa:repositories scans for all interfaces that extend Spring Data Repository and
         creates implementations for use at runtime.  -->
    <jpa:repositories base-package="com.shram.onlineshopping.repository"/>


    <!-- Creates a JPA EntityManagerFactory according to JPA's standard container bootstrap contract.
         This is the most powerful way to set up a shared JPA EntityManagerFactory in a Spring application context;
     -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.shram.onlineshopping.domain"/>

        <!--  provider-specific initialization,etc. -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="jpaProperties">
            <props>
                <!--
                   validate: validate the schema, makes no changes to the database.
                   update: update the schema.
                   create: creates the schema, destroying previous data.
                   create-drop: drop the schema at the end of the session.
                  These options intended to be developers tools and not to facilitate any production level databases
                           <prop key="hibernate.hbm2ddl.auto">create-drop</prop>
               -->
                <!-- hibernate.dialect. This property makes Hibernate
                     generate the appropriate SQL for the chosen database. -->
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="use_sql_comments">${use_sql_comments}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.hbm2ddl.import_files">populateMYSQL.sql</prop>
            </props>
        </property>
    </bean>


    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <!--
           Post-processor to perform exception translation on @Repository classes
           (from native exceptions such as JPA PersistenceExceptions to
           Spring&rsquo;s DataAccessException hierarchy).
       -->
    <bean id="persistenceExceptionTranslationPostProcessor"
          class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

</beans>
